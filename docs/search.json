[
  {
    "objectID": "number1.html",
    "href": "number1.html",
    "title": "기말고사 1번 문제",
    "section": "",
    "text": "기말고사1-(1),(2)\n\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\nimport json\nimport requests\nimport pickle\npd.options.plotting.backend = \"plotly\"\npio.templates.default = \"plotly_white\"\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv\").assign(\n    log_trip_duration = lambda df: np.log(df.trip_duration),\n    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),\n    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),\n    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),\n    #---#\n    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})\n).assign(\n    speed = lambda df: df.dist / df.trip_duration,\n    pickup_hour = lambda df: df.pickup_datetime.dt.hour,\n    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,\n    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek\n)\ndf_small = df[::100].reset_index(drop=True)\ndf.head()\n\nweekday_korean = ['월', '화', '수', '목', '금', '토', '일']\n\nnearby_trips = df[df['dist'] &lt; 0.012819]\n\naverage_speed = nearby_trips.groupby(['dayofweek', 'pickup_hour'])['speed'].mean().reset_index(name='평균속력')\n\nfig1 = px.density_heatmap(\n    data_frame=average_speed,\n    x='pickup_hour',\n    y='dayofweek',\n    z='평균속력',\n    nbinsx=24,\n    nbinsy=7,\n    height=300,\n)\n\nfig1.update_layout(\n    xaxis=dict(title='Pickup 시간'),\n    yaxis=dict(\n        title='요일',\n        tickvals=list(range(7)),  # 0부터 6까지의 값으로 요일 설정\n        ticktext=weekday_korean   # 한글 요일 텍스트 설정\n    )\n)\n\nfig1.show()\n\n                                                \n\n\n\ndf.dist.describe()\n# 월~일 요일 한글 리스트\nweekday_korean = ['월', '화', '수', '목', '금', '토', '일']\n\n# 근거리(거리가 0.012819 보다 작은 거리)에 해당하는 데이터 필터링\n#nearby_trips = df[df['dist'] &lt; 0.012819]\n\n# 이동 거리 대신 평균 이동 거리 계산\naverage_distance = nearby_trips.groupby(['dayofweek', 'pickup_hour'])['dist'].mean().reset_index(name='평균이동거리')\n\n# px.density_heatmap을 사용하여 요일과 시간대에 따른 근거리 이동 건수 시각화\nfig2 = px.density_heatmap(\n    data_frame=average_distance,\n    x='pickup_hour',\n    y='dayofweek',\n    z='평균이동거리',\n    nbinsx=24,\n    nbinsy=7,\n    height=300,\n)\n\nfig2.update_layout(\n    xaxis=dict(title='Pickup 시간'),\n    yaxis=dict(\n        title='요일',\n        tickvals=list(range(7)),  # 0부터 6까지의 값으로 요일 설정\n        ticktext=weekday_korean   # 한글 요일 텍스트 설정\n    )\n)\n\nfig2.show()\n\n                                                \n\n\n\n\n기말고사1-(3)\n\nspeed = pd.Series([1,1,2,2,3,3,4,4])\nprint(pd.qcut(speed,4))\nprint(pd.qcut(speed,4,labels=['매우느림','조금느림','조금빠름','매우빠름']))\ndf_small['평균속도'] = pd.qcut(df_small['speed'], 4, labels=['매우느림', '조금느림', '조금빠름', '매우빠름'])\n\n# 색상 매핑을 위한 딕셔너리 생성\ncolor_map = {\n     '조금느림': 'yellow',\n     '매우느림': 'green',\n     '매우빠름': 'blue',\n     '조금빠름': 'red'\n}\n\n# Scatter Mapbox 생성\nfig3 = px.scatter_mapbox(\n    data_frame=df_small,\n    lat='dropoff_latitude',\n    lon='dropoff_longitude',\n    color='평균속도',\n    mapbox_style='carto-positron',\n    zoom=11,\n    color_discrete_map=color_map  # 색상 매핑을 적용합니다.\n)\n\n# 속도 구간에 따라 승차와 하차 지점을 연결하는 선 추가\nfor index, row in df_small.iterrows():\n    fig3.add_trace(\n        dict(\n            type='scattermapbox',\n            lat=[row['pickup_latitude'], row['dropoff_latitude']],\n            lon=[row['pickup_longitude'], row['dropoff_longitude']],\n            mode='lines',\n            line=dict(width=2, color=color_map[row['평균속도']]),  # 속도 구간에 따라 색상 설정\n            hoverinfo='none',\n            showlegend=False\n        )\n    )\n\nfig3.show(config={'scrollZoom': False})\n\n0    (0.999, 1.75]\n1    (0.999, 1.75]\n2      (1.75, 2.5]\n3      (1.75, 2.5]\n4      (2.5, 3.25]\n5      (2.5, 3.25]\n6      (3.25, 4.0]\n7      (3.25, 4.0]\ndtype: category\nCategories (4, interval[float64, right]): [(0.999, 1.75] &lt; (1.75, 2.5] &lt; (2.5, 3.25] &lt; (3.25, 4.0]]\n0    매우느림\n1    매우느림\n2    조금느림\n3    조금느림\n4    조금빠름\n5    조금빠름\n6    매우빠름\n7    매우빠름\ndtype: category\nCategories (4, object): ['매우느림' &lt; '조금느림' &lt; '조금빠름' &lt; '매우빠름']\n\n\n/root/anaconda3/envs/dv2023/lib/python3.10/site-packages/plotly/express/_core.py:2044: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning."
  }
]